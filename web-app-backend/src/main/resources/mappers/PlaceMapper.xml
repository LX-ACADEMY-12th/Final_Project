<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.PlaceMapper">
    <resultMap id="PlaceResultMap" type="com.example.demo.dto.PlaceResultDTO"> <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="subject" column="subject"/>
        <result property="grade" column="grade"/>
        <result property="place" column="place"/>
        <result property="imageUrl" column="imageUrl"/>
        <result property="hashtags" column="hashtags"
                jdbcType="ARRAY"
                javaType="java.util.List"
                typeHandler="com.example.demo.typehandler.StringListTypeHandler"/> <result property="lat" column="lat"/>
        <result property="lng" column="lng"/>
        <result property="type" column="type"/>
    </resultMap>

    <!-- 전시 일반 필터  -->
    <select id="findExhibitionsByFilter" resultMap="PlaceResultMap">
        SELECT
            e.exhibition_id as id,
            e.main_image_url as imageUrl,
            MIN(gc.grade_name) as grade,
            cmc.category_name as subject,
            e.exhibition_name as title,
            e.type as type,
            eh.science_center_name || ' ' || eh.hall_name as place,
            ARRAY_AGG(DISTINCT csc.sub_category_name) as hashtags,
            e.latitude as lat,
            e.longitude as lng
        FROM exhibition e
                 JOIN exhibition_hall AS eh ON e.hall_id = eh.hall_id
                 JOIN exhibition_curriculum_mapping ecm ON e.exhibition_id = ecm.exhibition_id
                 JOIN curriculum_sub_category csc ON ecm.sub_category_id = csc.sub_category_id
                 JOIN curriculum_main_category cmc ON csc.main_category_id = cmc.main_category_id
                 JOIN grade_category gc ON csc.grade_id = gc.grade_id
        WHERE
            cmc.category_name = #{subject}
          AND gc.grade_name LIKE '%' || #{grade} || '%'
        GROUP BY
            e.exhibition_id, e.main_image_url, cmc.category_name, e.exhibition_name, e.type, place, e.latitude, e.longitude
        ORDER BY
            e.exhibition_id
    </select>
    <!-- 전시 반경 필터  -->
    <select id="findExhibitionsByRadius" resultMap="PlaceResultMap">
        -- ▼▼▼ 사용자 위치 및 반경 설정 (이 값들을 실제 값으로 대체) ▼▼▼
        -- $user_lat : 37.5665  (예: 사용자의 현재 위도)
        -- $user_lng : 126.9780 (예: 사용자의 현재 경도)
        -- $radius_km : 10       (예: 검색 반경 10km)

        -- (참고) 사용자의 위치를 geography 객체로 미리 생성
        -- ST_SetSRID(ST_MakePoint(경도, 위도), 4326)::geography
        -- $user_geog := ST_SetSRID(ST_MakePoint($user_lng, $user_lat), 4326)::geography

        SELECT e.exhibition_id                               as id,
               e.main_image_url                              as imageUrl,
               MIN(gc.grade_name)                            as grade,
               cmc.category_name                             as subject,
               e.exhibition_name                             as title,
               e.type                                        as type,
               eh.science_center_name || ' ' || eh.hall_name as place,
               ARRAY_AGG(DISTINCT csc.sub_category_name)     as hashtags,
               e.latitude                                    as lat,
               e.longitude                                   as lng,
               -- ST_Distance로 실제 거리(km) 계산
               -- (ST_Distance(A, B)는 미터(m) 단위로 거리를 반환)
               (ST_Distance(
                        e.geog,
                        ST_SetSRID(ST_MakePoint(#{lng}, #{lat}), 4326)::geography
                ) / 1000.0)                                  AS distance_km

        FROM exhibition e
                 JOIN exhibition_hall AS eh ON e.hall_id = eh.hall_id
                 JOIN exhibition_curriculum_mapping ecm ON e.exhibition_id = ecm.exhibition_id
                 JOIN curriculum_sub_category csc ON ecm.sub_category_id = csc.sub_category_id
                 JOIN curriculum_main_category cmc ON csc.main_category_id = cmc.main_category_id
                 JOIN grade_category gc ON csc.grade_id = gc.grade_id
        WHERE cmc.category_name = #{subject}
          AND gc.grade_name LIKE '%' || #{grade} || '%'

          -- PostGIS 반경 검색 (인덱스 활용)
          -- e.geog : 'geography' 타입 컬럼
          -- $radius_km : ST_DWithin은 '미터(m)' 단위로 비교
          AND ST_DWithin(
                e.geog,
                ST_SetSRID(ST_MakePoint(#{lng}, #{lat}), 4326)::geography,
                #{radius} * 1000
              )
        -- 여기까지 반경 검색 필터

        GROUP BY
            e.exhibition_id,
            e.main_image_url,
            cmc.category_name,
            e.exhibition_name,
            e.type,
            place,
            e.latitude,
            e.longitude,
            e.geog -- SELECT 절에서 ST_Distance를 사용했으므로 GROUP BY에 'geog' 컬럼 추가

        ORDER BY
            distance_km; -- 가까운 순서로 정렬
    </select>
    <select id="findExhibitionsByRegion" resultType="com.example.demo.dto.PlaceResultDTO">
        SELECT
            e.exhibition_id as id,
            e.exhibition_name as title,
            e.main_image_url as imageUrl,
            e.latitude as lat,
            e.longitude as lng,
            e.description,
            e.address_detail as place,
            cmc.category_name as subject,
            gc.grade_name as grade
        FROM exhibition e
                 JOIN exhibition_curriculum_mapping ecm ON e.exhibition_id = ecm.exhibition_id
                 JOIN curriculum_sub_category csc ON ecm.sub_category_id = csc.sub_category_id
                 JOIN curriculum_main_category cmc ON csc.main_category_id = cmc.main_category_id
                 JOIN grade_category gc ON csc.grade_id = gc.grade_id
        WHERE cmc.category_name = #{subject}
          AND gc.grade_name LIKE '%' || #{grade} || '%'
          AND e.address_detail LIKE #{regionPattern}
    </select>

    <!-- 과학 장소 일반 필터  -->
    <select id="findPlacesByFilter" resultMap="PlaceResultMap">
        SELECT
            sp.place_id as id,
            sp.main_image_url as imageUrl,
            MIN(gc.grade_name) as grade,
            cmc.category_name as subject,
            sp.place_name as title,
            sp.address_detail as place,
            ARRAY_AGG(DISTINCT csc.sub_category_name) as hashtags,
            sp.latitude as lat,
            sp.longitude as lng
        FROM science_place sp
                 JOIN place_curriculum_mapping pcm ON sp.place_id = pcm.place_id
                 JOIN curriculum_sub_category csc ON pcm.sub_category_id = csc.sub_category_id
                 JOIN curriculum_main_category cmc ON csc.main_category_id = cmc.main_category_id
                 JOIN grade_category gc ON csc.grade_id = gc.grade_id
        WHERE cmc.category_name = #{subject}
          AND gc.grade_name LIKE '%' || #{grade} || '%'
        GROUP BY
            sp.place_id,
            sp.main_image_url,
            cmc.category_name,
            sp.place_name,
            place,
            sp.latitude,
            sp.longitude
        ORDER BY
            sp.place_id;
    </select>
    <!-- 과학 장소 반경 필터   -->
    <select id="findPlacesByRadius" resultMap="PlaceResultMap">
        -- ▼▼▼ 사용자 위치 및 반경 설정 (이 값들을 실제 값으로 대체) ▼▼▼
        -- $user_lat : 37.5665  (예: 사용자의 현재 위도)
        -- $user_lng : 126.9780 (예: 사용자의 현재 경도)
        -- $radius_km : 10       (예: 검색 반경 10km)

        -- (참고) 사용자의 위치를 geography 객체로 미리 생성
        -- ST_SetSRID(ST_MakePoint(경도, 위도), 4326)::geography
        -- $user_geog := ST_SetSRID(ST_MakePoint($user_lng, $user_lat), 4326)::geography

        SELECT
            sp.place_id as id,
            sp.main_image_url as imageUrl,
            MIN(gc.grade_name) as grade,
            cmc.category_name as subject,
            sp.place_name as title,
            sp.address_detail as place,
            ARRAY_AGG(DISTINCT csc.sub_category_name) as hashtags,
            sp.latitude as lat,
            sp.longitude as lng,
            -- ST_Distance로 실제 거리(km) 계산
            -- (ST_Distance(A, B)는 미터(m) 단위로 거리를 반환)
            (ST_Distance(
                     sp.geog,
                     ST_SetSRID(ST_MakePoint(#{lng}, #{lat}), 4326)::geography
             ) / 1000.0) AS distance_km

        FROM science_place sp
                 JOIN place_curriculum_mapping pcm ON sp.place_id = pcm.place_id
                 JOIN curriculum_sub_category csc ON pcm.sub_category_id = csc.sub_category_id
                 JOIN curriculum_main_category cmc ON csc.main_category_id = cmc.main_category_id
                 JOIN grade_category gc ON csc.grade_id = gc.grade_id
        WHERE cmc.category_name = #{subject}
          AND gc.grade_name LIKE '%' || #{grade} || '%'

          -- PostGIS 반경 검색 (인덱스 활용)
          -- e.geog : 'geography' 타입 컬럼
          -- $radius_km * 1000 : ST_DWithin은 '미터(m)' 단위로 비교
          AND ST_DWithin(
                sp.geog,
                ST_SetSRID(ST_MakePoint(#{lng}, #{lat}), 4326)::geography,
                #{radius} * 1000
              )
        -- 여기까지 반경 검색 필터

        GROUP BY
            sp.place_id,
            sp.main_image_url,
            cmc.category_name,
            sp.place_name,
            place,
            sp.latitude,
            sp.longitude,
            sp.geog -- (중요) SELECT 절에서 ST_Distance를 사용했으므로 GROUP BY에 'geog' 컬럼 추가

        ORDER BY
            distance_km; -- 가까운 순서로 정렬
    </select>
    <select id="findPlacesByRegion" resultType="com.example.demo.dto.PlaceResultDTO">
        SELECT
            sp.place_id as id,
            sp.place_name as title,
            sp.main_image_url as imageUrl,
            sp.latitude as lat,
            sp.longitude as lng,
            sp.description,
            sp.address_detail as place,
            cmc.category_name as subject,
            gc.grade_name as grade
        FROM science_place sp
                 JOIN place_curriculum_mapping pcm ON sp.place_id = pcm.place_id
                 JOIN curriculum_sub_category csc ON pcm.sub_category_id = csc.sub_category_id
                 JOIN curriculum_main_category cmc ON csc.main_category_id = cmc.main_category_id
                 JOIN grade_category gc ON csc.grade_id = gc.grade_id
        WHERE cmc.category_name = #{subject}
          AND gc.grade_name LIKE '%' || #{grade} || '%'
          AND sp.address_detail LIKE #{regionPattern}
    </select>

    <!-- 과학 장소 AI 추천 검색  -->
    <resultMap id="courseItemResultMap" type="com.example.demo.dto.CourseItemDTO">
        <result property="id"       column="id"/>
        <result property="title"    column="exhibition_name"/>
        <result property="imageUrl" column="main_image_url"/>
        <result property="subject"  column="subject"/>
        <result property="grade"    column="grade"/>
    </resultMap>

    <select id="findSimilarSciencePlace" resultMap="courseItemResultMap">
        WITH TargetGeom AS (
            SELECT geog FROM science_place WHERE place_id = #{currentId}
        )
        SELECT
            P.place_id,
            P.place_name,
            P.description,
            P.place_type,
            (SELECT cat.category_name
             FROM curriculum_main_category cat
                      JOIN curriculum_sub_category sub ON cat.main_category_id = sub.main_category_id
                      JOIN place_curriculum_mapping pcm_sub ON pcm_sub.sub_category_id = sub.sub_category_id
             WHERE pcm_sub.place_id = P.place_id
               AND cat.category_name = #{mainCategory}
                LIMIT 1) AS subject_name,
            (SELECT g.grade_name
             FROM grade_category g
             JOIN place_grade_mapping pgm_sub ON g.grade_id = pgm_sub.grade_id
             WHERE pgm_sub.place_id = P.place_id
               AND g.grade_name = #{grade}
             LIMIT 1) AS grade_name
        FROM science_place P
        WHERE EXISTS (
            SELECT 1
            FROM place_curriculum_mapping pcm
            INNER JOIN curriculum_sub_category csc ON pcm.sub_category_id = csc.sub_category_id
            INNER JOIN curriculum_main_category cmc ON csc.main_category_id = cmc.main_category_id
            WHERE pcm.place_id = P.place_id
          AND cmc.category_name = #{mainCategory}
            )
          AND EXISTS (
            SELECT 1
            FROM place_grade_mapping pgm
            INNER JOIN grade_category gc ON pgm.grade_id = gc.grade_id
            WHERE pgm.place_id = P.place_id
          AND gc.grade_name = #{grade}
            )
          AND P.place_id != #{currentId}
          AND ST_DWithin(P.geog, (SELECT geog FROM TargetGeom), 1000000)
        ORDER BY P.average_rating DESC, P.total_reviews DESC
            LIMIT 10

    </select>

</mapper>